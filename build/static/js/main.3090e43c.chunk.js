(this.webpackJsonpmy_reactjs = this.webpackJsonpmy_reactjs || []).push([[0], { 102: function (e, a, s) { }, 104: function (e, a, s) { }, 105: function (e, a, s) { }, 135: function (e, a, s) { }, 136: function (e, a, s) { }, 137: function (e, a, s) { }, 138: function (e, a, s) { }, 154: function (e, a, s) { }, 157: function (e, a, s) { }, 158: function (e, a, s) { }, 159: function (e, a, s) { }, 162: function (e, a, s) { }, 163: function (e, a, s) { }, 164: function (e, a, s) { }, 181: function (e, a, s) { }, 182: function (e, a, s) { }, 183: function (e, a, s) { }, 184: function (e, a, s) { }, 185: function (e, a, s) { }, 186: function (e, a, s) { }, 189: function (e, a, s) { "use strict"; s.r(a); var t = s(1), c = s(19), r = s.n(c), i = (s(102), s(4)), n = (s(103), s(104), s(105), s(13)), l = s(11), o = s(2), d = s(9), j = s(91), b = s.n(j), h = s(92); const p = b.a.create({ baseURL: "http://14.225.217.32:8080" }); Object(h.a)(p, { retries: 3, retryCondition: e => 405 === e.response.status, shouldResetTimeout: !0, retryDelay: (e, a) => 1e3 * e }), p.defaults.withCredentials = !0, p.interceptors.response.use((function (e) { return e.data }), (function (e) { var a, s, t; let c = (null === e || void 0 === e || null === (a = e.response) || void 0 === a ? void 0 : a.status) || 500, r = null === e || void 0 === e || null === (s = e.response) || void 0 === s || null === (t = s.data) || void 0 === t ? void 0 : t.errorMessage; return 403 === c ? (i.b.error(r), e) : e })); var m = p; const u = Object(d.b)("user/loginUser", (async (e, a) => { let { rejectWithValue: s } = a; try { const a = await (e => m.post("api/user/login-user", { email: e.email, password: e.password }))(e); return a } catch (t) { return s(t) } })), O = Object(d.b)("user/logoutUser", (async () => { try { return await m.get("/api/user/logout-user") } catch (e) { return e } })), g = Object(d.b)("user/registerNewUser", (async (e, a) => { let { rejectWithValue: s } = a; try { const a = await (e => m.post("/api/user/register", { email: e.email, password: e.password, firstName: e.firstName, lastName: e.lastName, address: e.address, phoneNumber: e.phoneNumber, gender: e.gender, groupId: e.groupId }))(e); return a } catch (t) { return s(t) } })), x = Object(d.b)("user/fetchAllUsers", (async e => { try { const a = await (e => m.get("/api/user/get-all-users?page=".concat(e.page, "&limit=").concat(e.limit)))(e); return a } catch (a) { return a } })), v = Object(d.b)("user/getUserById", (async e => { try { const a = await (e => m.get("/api/user/get-one-user?id=".concat(e)))(e); return a } catch (a) { return a } })), C = Object(d.b)("user/getUserRefresh", (async () => { try { return await m.get("/api/user/get-user-refresh") } catch (e) { return e } })), N = Object(d.b)("user/deleteUser", (async e => { try { const a = await (e => m.delete("/api/user/delete-user", { data: { userId: e } }))(e); return a } catch (a) { return a } })), y = Object(d.b)("user/updateUser", (async e => { try { const a = await (e => m.put("/api/user/update-user", { id: e.id, firstName: e.firstName, lastName: e.lastName, address: e.address, phoneNumber: e.phoneNumber, gender: e.gender, groupId: e.groupId }))(e); return a } catch (a) { return a } })), f = Object(d.b)("user/updatePersonal", (async e => { try { const a = await (e => m.put("/api/user/update-personal-user", { id: e.id, firstName: e.firstName, lastName: e.lastName, address: e.address, phoneNumber: e.phoneNumber, gender: e.gender, groupId: e.groupId }))(e); return a } catch (a) { return a } })), w = Object(d.b)("user/changePassword", (async e => { try { const a = await (e => m.put("/api/user/change-password", { userId: e.userId, password: e.password, newPassword: e.newPassword }))(e); return a } catch (a) { return a } })), k = Object(d.b)("user/forgotPassword", (async e => { try { return await (a = e, m.put("/api/user/forgot-password", { email: a })) } catch (s) { return s } var a })), B = { isUserError: null, isAuthenticated: !1, isLogging: !1, user: null, isRemoving: !1, isRegistering: !1, isLoadingAllUsers: !1, listUsers: [], totalPages: 0, isLoadingUserById: !1, detailUser: null, isRefreshingUser: !1, isDeletingUser: !1, isUpdatingUser: !1, isUpdatingPersonal: !1, isChangingPassword: !1, isRenewingPassword: !1 }; var L = Object(d.c)({ name: "user", initialState: B, reducers: {}, extraReducers: e => { e.addCase(u.pending, ((e, a) => { e.isLogging = !0, e.isAuthenticated = !1 })).addCase(u.fulfilled, ((e, a) => { var s, t; e.isLogging = !1, e.isAuthenticated = !0, e.user = null === (s = a.payload) || void 0 === s || null === (t = s.data) || void 0 === t ? void 0 : t.user })).addCase(u.rejected, ((e, a) => { e.isLogging = !1, e.isAuthenticated = !1, e.isUserError = a.payload.message })), e.addCase(O.pending, ((e, a) => { e.isRemoving = !0 })).addCase(O.fulfilled, ((e, a) => { e.isRemoving = !1, e.isAuthenticated = !1, e.user = B.user })).addCase(O.rejected, ((e, a) => { e.isRemoving = !1, e.isUserError = a.payload.message })), e.addCase(g.pending, ((e, a) => { e.isRegistering = !0 })).addCase(g.fulfilled, ((e, a) => { e.isRegistering = !1 })).addCase(g.rejected, ((e, a) => { e.isRegistering = !1, e.isUserError = a.payload.message })), e.addCase(x.pending, ((e, a) => { e.isLoadingAllUsers = !0 })).addCase(x.fulfilled, ((e, a) => { var s, t, c, r; e.isLoadingAllUsers = !1, e.listUsers = null === (s = a.payload) || void 0 === s || null === (t = s.data) || void 0 === t ? void 0 : t.users, e.totalPages = null === (c = a.payload) || void 0 === c || null === (r = c.data) || void 0 === r ? void 0 : r.totalPages })).addCase(x.rejected, ((e, a) => { e.isLoadingAllUsers = !1, e.isUserError = a.payload.message })), e.addCase(v.pending, ((e, a) => { e.isLoadingUserById = !0 })).addCase(v.fulfilled, ((e, a) => { var s; e.isLoadingUserById = !1, e.detailUser = null === (s = a.payload) || void 0 === s ? void 0 : s.data })).addCase(v.rejected, ((e, a) => { e.isLoadingUserById = !1, e.isUserError = a.payload.message })), e.addCase(C.pending, ((e, a) => { e.isRefreshingUser = !0 })).addCase(C.fulfilled, ((e, a) => { var s, t, c, r; e.isRefreshingUser = !1, e.isAuthenticated = null === (s = a.payload) || void 0 === s || null === (t = s.data) || void 0 === t ? void 0 : t.isAuthenticated, e.user = null === (c = a.payload) || void 0 === c || null === (r = c.data) || void 0 === r ? void 0 : r.user })).addCase(C.rejected, ((e, a) => { e.isAuthenticated = !1, e.isRefreshingUser = !1 })), e.addCase(N.pending, ((e, a) => { e.isDeletingUser = !0 })).addCase(N.fulfilled, ((e, a) => { e.isDeletingUser = !1 })).addCase(N.rejected, ((e, a) => { e.isDeletingUser = !1, e.isUserError = a.payload.message })), e.addCase(y.pending, ((e, a) => { e.isUpdatingUser = !0 })).addCase(y.fulfilled, ((e, a) => { e.isUpdatingUser = !1 })).addCase(y.rejected, ((e, a) => { e.isUpdatingUser = !1, e.isUserError = a.payload.message })), e.addCase(f.pending, ((e, a) => { e.isUpdatingPersonal = !0 })).addCase(f.fulfilled, ((e, a) => { var s; e.isUpdatingPersonal = !1, e.user = null === (s = a.payload) || void 0 === s ? void 0 : s.data })).addCase(f.rejected, ((e, a) => { e.isUpdatingPersonal = !1, e.isUserError = a.payload.message })), e.addCase(w.pending, ((e, a) => { e.isChangingPassword = !0 })).addCase(w.fulfilled, ((e, a) => { e.isChangingPassword = !1 })).addCase(w.rejected, ((e, a) => { e.isChangingPassword = !1, e.isUserError = a.payload.message })), e.addCase(k.pending, ((e, a) => { e.isRenewingPassword = !0 })).addCase(k.fulfilled, ((e, a) => { e.isRenewingPassword = !1 })).addCase(k.rejected, ((e, a) => { e.isRenewingPassword = !1, e.isUserError = a.payload.message })) } }).reducer, S = s(94), F = s(34), U = s(72), E = s(96), M = s(0); var I = e => { const a = Object(o.c)((e => e.user.isAuthenticated)), s = Object(o.c)((e => e.user.user)), t = Object(n.h)(), c = Object(o.b)(), r = Object(n.g)(); return Object(M.jsx)("div", { children: !("/login" === t.pathname || "/register" === t.pathname) && Object(M.jsx)(U.a, { className: "topnav fixed-top", expand: "lg", children: Object(M.jsxs)(S.a, { children: [Object(M.jsx)(U.a.Toggle, { "aria-controls": "basic-navbar-nav" }), Object(M.jsxs)(U.a.Collapse, { id: "basic-navbar-nav", children: [Object(M.jsxs)(F.a, { className: "me-auto", children: [Object(M.jsx)(F.a.Link, { children: Object(M.jsx)(l.b, { to: "/", exact: !0, children: "Home" }) }), a && s ? Object(M.jsxs)(M.Fragment, { children: [Object(M.jsx)(F.a.Link, { children: Object(M.jsx)(l.b, { to: "/personal", children: "Personal" }) }), Object(M.jsx)(F.a.Link, { children: Object(M.jsx)(l.b, { to: "/booking", exact: !0, children: "Booking" }) })] }) : Object(M.jsx)(F.a.Link, { children: Object(M.jsx)(l.b, { to: "/login", children: "Login" }) })] }), Object(M.jsx)(F.a, { children: a && s && Object(M.jsxs)(M.Fragment, { children: [Object(M.jsxs)("div", { className: "user-info", children: [Object(M.jsxs)("h3", { className: "user-role", children: [s && s.Group && s.Group.name, ":"] }), Object(M.jsx)("h3", { className: "user-name", children: s && s.firstName })] }), Object(M.jsxs)(E.a, { className: 'nav-dropdown-customized className="justify-content-end"', title: "Manage", id: "basic-nav-dropdown", children: [Object(M.jsx)(F.a.Link, { children: Object(M.jsx)(l.b, { to: "/car", exact: !0, children: "Manage Car" }) }), Object(M.jsx)(F.a.Link, { children: Object(M.jsx)(l.b, { to: "/booking/manage", exact: !0, children: "Manage booking" }) }), Object(M.jsx)(F.a.Link, { children: Object(M.jsx)(l.b, { to: "/user", exact: !0, children: "Manage user" }) })] }), Object(M.jsx)("button", { onClick: () => (async () => { var e; let a = await c(O()); 0 === (null === a || void 0 === a || null === (e = a.payload) || void 0 === e ? void 0 : e.errorCode) && (i.b.success(a.payload.errorMessage), r.push("/")) })(), className: "btn btn-primary btn-customized", children: Object(M.jsx)("i", { className: "fa-solid fa-right-from-bracket" }) })] }) })] })] }) }) }) }; s(135), s(136); var P = e => Object(M.jsxs)("div", { className: "home-footer-container", children: [Object(M.jsx)("div", { className: "map-footer" }), Object(M.jsxs)("div", { className: "home-footer", children: [Object(M.jsxs)("div", { className: "social-list", children: [Object(M.jsx)("a", { href: "/#", children: Object(M.jsx)("i", { className: "fab fa-facebook" }) }), Object(M.jsx)("a", { href: "/#", children: Object(M.jsx)("i", { className: "fab fa-instagram" }) }), Object(M.jsx)("a", { href: "/#", children: Object(M.jsx)("i", { className: "fab fa-youtube" }) }), Object(M.jsx)("a", { href: "/#", children: Object(M.jsx)("i", { className: "fab fa-twitter" }) }), Object(M.jsx)("a", { href: "/#", children: Object(M.jsx)("i", { className: "fab fa-linkedin" }) }), Object(M.jsx)("a", { href: "/#", children: Object(M.jsx)("i", { className: "fab fa-pinterest-p" }) })] }), Object(M.jsxs)("div", { className: "copyright", children: ["\xa9 2024", Object(M.jsx)("button", { children: "LuxuryCar.com" })] })] })] }); s(137); var A = e => Object(M.jsx)("div", { className: "home-header-container", children: Object(M.jsxs)("div", { className: "home-header-banner", children: [Object(M.jsxs)("div", { className: "content-up", children: [Object(M.jsx)("div", { className: "title1", children: "Ultimate Luxury Vehicles" }), Object(M.jsx)("div", { className: "title2", children: "Car And Driver" }), Object(M.jsxs)("div", { className: "search", children: [Object(M.jsx)("i", { className: "fa fa-search" }), Object(M.jsx)("input", { type: "text", placeholder: "Find your car" })] })] }), Object(M.jsx)("div", { className: "content-down", children: Object(M.jsxs)("div", { className: "options", children: [Object(M.jsx)("div", { className: "option-child", children: Object(M.jsx)("div", { className: "icon-child", children: Object(M.jsx)("i", { className: "fa-solid fa-car" }) }) }), Object(M.jsx)("div", { className: "option-child", children: Object(M.jsx)("div", { className: "icon-child", children: Object(M.jsx)("i", { className: "fa-solid fa-motorcycle" }) }) }), Object(M.jsx)("div", { className: "option-child", children: Object(M.jsx)("div", { className: "icon-child", children: Object(M.jsx)("i", { className: "fa-solid fa-cart-shopping" }) }) }), Object(M.jsx)("div", { className: "option-child", children: Object(M.jsx)("div", { className: "icon-child", children: Object(M.jsx)("i", { className: "fa-regular fa-credit-card" }) }) })] }) })] }) }), D = (s(138), s(49)), R = s.n(D); const H = Object(d.b)("car/getAllCars", (async e => { try { const a = await (e => m.get("/api/car/get-all-cars?page=".concat(e.page, "&limit=").concat(e.limit)))(e); return a } catch (a) { return a } })), G = Object(d.b)("car/creatNewCar", (async (e, a) => { let { rejectWithValue: s } = a; try { const a = await (e => m.post("/api/car/create-new-car", { name: e.name, model: e.model, description: e.description, image: e.image }))(e); return a } catch (t) { return s(t) } })), T = Object(d.b)("car/deleteCar", (async e => { try { const a = await (e => m.delete("/api/car/delete-car", { data: { carId: e } }))(e); return a } catch (a) { return a } })), z = Object(d.b)("car/updateCar", (async e => { try { const a = await (e => m.put("/api/car/update-car", { id: e.id, name: e.name, model: e.model, description: e.description, image: e.image }))(e); return a } catch (a) { return a } })), W = Object(d.b)("car/getBmwCar", (async () => { try { return await m.get("/api/car/get-bmw-car") } catch (e) { return e } })), Y = Object(d.b)("car/getFerrariCar", (async () => { try { return await m.get("/api/car/get-ferrari-car") } catch (e) { return e } })), Z = Object(d.b)("car/getLamborghiniCar", (async () => { try { return await m.get("/api/car/get-lamborghini-car") } catch (e) { return e } })), V = Object(d.b)("car/getCarById", (async e => { try { const a = await (e => m.get("/api/car/get-one-car?carId=".concat(e)))(e); return a } catch (a) { return a } })); var K = Object(d.c)({ name: "car", initialState: { isCarError: null, isLoadingAllCars: !1, carList: [], totalCarPages: 0, isCreatingCar: !1, isDeletingCar: !1, isUpdatingCar: !1, isLoadingBmwCar: !1, bmwCarList: [], isLoadingFerrariCar: !1, ferrariCarList: [], isLoadingLamborghiniCar: !1, lamborghiniCarList: [], isLoadingCarById: !1, detailCar: null }, reducers: {}, extraReducers: e => { e.addCase(H.pending, ((e, a) => { e.isLoadingAllCars = !0 })).addCase(H.fulfilled, ((e, a) => { var s, t, c, r; e.isLoadingAllCars = !1, e.carList = null === (s = a.payload) || void 0 === s || null === (t = s.data) || void 0 === t ? void 0 : t.cars, e.totalCarPages = null === (c = a.payload) || void 0 === c || null === (r = c.data) || void 0 === r ? void 0 : r.totalCarPages })).addCase(H.rejected, ((e, a) => { e.isLoadingAllCars = !1, e.isCarError = a.payload.message })).addCase(G.pending, ((e, a) => { e.isCreatingCar = !0 })).addCase(G.fulfilled, ((e, a) => { e.isCreatingCar = !1 })).addCase(G.rejected, ((e, a) => { e.isCreatingCar = !1, e.isCarError = a.payload.message })).addCase(T.pending, ((e, a) => { e.isDeletingCar = !0 })).addCase(T.fulfilled, ((e, a) => { e.isDeletingCar = !1 })).addCase(T.rejected, ((e, a) => { e.isDeletingCar = !1, e.isCarError = a.payload.message })).addCase(z.pending, ((e, a) => { e.isUpdatingCar = !0 })).addCase(z.fulfilled, ((e, a) => { e.isUpdatingCar = !1 })).addCase(z.rejected, ((e, a) => { e.isUpdatingCar = !1, e.isCarError = a.payload.message })).addCase(W.pending, ((e, a) => { e.isLoadingBmwCar = !0 })).addCase(W.fulfilled, ((e, a) => { var s; e.isLoadingBmwCar = !1, e.bmwCarList = null === (s = a.payload) || void 0 === s ? void 0 : s.data })).addCase(W.rejected, ((e, a) => { e.isLoadingBmwCar = !1, e.isCarError = a.payload.message })).addCase(Y.pending, ((e, a) => { e.isLoadingFerrariCar = !0 })).addCase(Y.fulfilled, ((e, a) => { var s; e.isLoadingFerrariCar = !1, e.ferrariCarList = null === (s = a.payload) || void 0 === s ? void 0 : s.data })).addCase(Y.rejected, ((e, a) => { e.isLoadingFerrariCar = !1, e.isCarError = a.payload.message })).addCase(Z.pending, ((e, a) => { e.isLoadingLamborghiniCar = !0 })).addCase(Z.fulfilled, ((e, a) => { var s; e.isLoadingLamborghiniCar = !1, e.lamborghiniCarList = null === (s = a.payload) || void 0 === s ? void 0 : s.data })).addCase(Z.rejected, ((e, a) => { e.isLoadingLamborghiniCar = !1, e.isCarError = a.payload.message })).addCase(V.pending, ((e, a) => { e.isLoadingCarById = !0 })).addCase(V.fulfilled, ((e, a) => { var s; e.isLoadingCarById = !1, e.detailCar = null === (s = a.payload) || void 0 === s ? void 0 : s.data })).addCase(V.rejected, ((e, a) => { e.isLoadingCarById = !1, e.isCarError = a.payload.message })) } }).reducer, _ = s(95), J = s.n(_); s(154); var X = function () { return Object(M.jsxs)("div", { className: "spiner-container", children: [Object(M.jsx)(J.a, { size: 80, loading: !0, color: "#36d7b7" }), Object(M.jsx)("h1", { className: "spiner-text mt-3", children: "Data is loading..." })] }) }; var $ = e => { const a = Object(o.b)(), s = Object(o.c)((e => e.car.bmwCarList)), c = Object(n.g)(), r = Object(o.c)((e => e.car.isLoadingBmwCar)); Object(t.useEffect)((() => { a(W()) }), []); return Object(M.jsx)("div", { className: "BMW-section-container", children: Object(M.jsxs)("div", { className: "section-container container mt-5", children: [Object(M.jsx)("div", { className: "section-header", children: Object(M.jsx)("span", { className: "header-title", children: "BMW" }) }), r ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "section-body", children: Object(M.jsx)(R.a, { ...e.settings, children: s && s.length > 0 && s.map(((e, a) => Object(M.jsx)("div", { className: "img-container px-3", children: Object(M.jsxs)("div", { onClick: () => { return a = e, void c.push("/car/detail?id=".concat(a.id)); var a }, className: "img-customize", children: [Object(M.jsx)("div", { style: { backgroundImage: "url(".concat(e.image, ")") }, className: "img-background" }), Object(M.jsx)("div", { className: "img-content", children: e.name })] }) }, "bmw-".concat(a)))) }) })] }) }) }; s(157); var q = e => { const a = Object(o.b)(), s = Object(o.c)((e => e.car.ferrariCarList)), c = Object(n.g)(), r = Object(o.c)((e => e.car.isLoadingFerrariCar)); Object(t.useEffect)((() => { a(Y()) }), []); return Object(M.jsx)("div", { className: "ferrari-section-container", children: Object(M.jsxs)("div", { className: "section-container container mt-5", children: [Object(M.jsx)("div", { className: "section-header", children: Object(M.jsx)("span", { className: "header-title", children: "FERRARI" }) }), r ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "section-body", children: Object(M.jsx)(R.a, { ...e.settings, children: s && s.length > 0 && s.map(((e, a) => Object(M.jsx)("div", { className: "img-container px-3", children: Object(M.jsxs)("div", { onClick: () => { return a = e, void c.push("/car/detail?id=".concat(a.id)); var a }, className: "img-customize", children: [Object(M.jsx)("div", { style: { backgroundImage: "url(".concat(e.image, ")") }, className: "img-background" }), Object(M.jsx)("div", { className: "img-content", children: e.name })] }) }, "bmw-".concat(a)))) }) })] }) }) }; s(158); var Q = e => { const a = Object(o.c)((e => e.car.lamborghiniCarList)), s = Object(o.b)(), c = Object(n.g)(), r = Object(o.c)((e => e.car.isLoadingLamborghiniCar)); Object(t.useEffect)((() => { s(Z()) }), []); return Object(M.jsx)("div", { className: "lamborghini-section-container", children: Object(M.jsxs)("div", { className: "section-container container mt-5", children: [Object(M.jsx)("div", { className: "section-header", children: Object(M.jsx)("span", { className: "header-title", children: "LAMBORGHINI" }) }), r ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "section-body", children: Object(M.jsx)(R.a, { ...e.settings, children: a && a.length > 0 && a.map(((e, a) => Object(M.jsx)("div", { className: "img-container px-3", children: Object(M.jsxs)("div", { onClick: () => { return a = e, void c.push("/car/detail?id=".concat(a.id)); var a }, className: "img-customize", children: [Object(M.jsx)("div", { style: { backgroundImage: "url(".concat(e.image, ")") }, className: "img-background" }), Object(M.jsx)("div", { className: "img-content", children: e.name })] }) }, "bmw-".concat(a)))) }) })] }) }) }; s(159); var ee = e => Object(M.jsx)("div", { className: "about-section-container", children: Object(M.jsxs)("div", { className: "section-container container", children: [Object(M.jsx)("div", { className: "about-header section-header", children: Object(M.jsx)("div", { className: "about-title", children: "VIDEO ABOUT" }) }), Object(M.jsx)("div", { className: "about-content row", children: Object(M.jsx)("div", { className: "about-video col-12", children: Object(M.jsx)("iframe", { src: "https://www.youtube.com/embed/AI7dOlAp-iE", title: "2024 Ferrari SF90 Spider Assetto Fiorano - Interior and Exterior Walkaround", frameBorder: "0", allow: "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share", referrerPolicy: "strict-origin-when-cross-origin", allowFullScreen: !0 }) }) })] }) }); s(160), s(161); var ae = e => { let a = { dots: !1, infinite: !1, speed: 800, slidesToShow: 3, slidesToScroll: 3, mobileFirst: !0, responsive: [{ breakpoint: 1024, settings: { slidesToShow: 3, slidesToScroll: 3 } }, { breakpoint: 600, settings: { slidesToShow: 2, slidesToScroll: 2 } }, { breakpoint: 480, settings: { slidesToShow: 1, slidesToScroll: 1 } }] }; return Object(M.jsxs)("div", { className: "home-container", children: [Object(M.jsx)(A, {}), Object(M.jsx)($, { settings: a }), Object(M.jsx)(q, { settings: a }), Object(M.jsx)(Q, { settings: a }), Object(M.jsx)(ee, {}), Object(M.jsx)(P, {})] }) }, se = (s(162), s(7)), te = s(3); var ce = e => { const [a, s] = Object(t.useState)(""), c = Object(o.b)(); return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.passwordModalShow, onHide: e.passwordModalClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsx)(te.a.Title, { children: "Send new password to your email" }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsx)("form", { className: "row g-3", children: Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "email", children: "Email" }), Object(M.jsx)("input", { value: a, onChange: e => s(e.target.value), id: "email", type: "email", className: "form-control", placeholder: "Enter your email" })] }) }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.passwordModalClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => (async () => { let s = await c(k(a)); s && s.payload && s.payload.response && s.payload.response.data && 0 !== s.payload.response.data.errorCode && i.b.error(s.payload.response.data.errorMessage), s && s.payload && 0 === s.payload.errorCode && (i.b.success(s.payload.errorMessage), e.passwordModalClose()) })(), children: "Send" })] })] }) }) }; var re = e => { const a = Object(n.g)(), s = Object(o.b)(), c = Object(o.c)((e => e.user.isLogging)), r = Object(o.c)((e => e.user.isAuthenticated)), l = Object(o.c)((e => e.user.user)), [d, j] = Object(t.useState)(!1), [b, h] = Object(t.useState)(""), [p, m] = Object(t.useState)(""), [O, g] = Object(t.useState)(!1), x = Object(o.c)((e => e.user.isRenewingPassword)); Object(t.useEffect)((() => { r && l && a.push("/") }), []); const v = async () => { if (!b) return i.b.error("Please enter your email address"), !1; if (!!!/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(b)) return i.b.error("Your email address is not valid"), !1; if (!p) return i.b.error("Please enter your password"), !1; let e = { email: b, password: p }, t = await s(u(e)); t && t.payload && t.payload.response && t.payload.response.data && 0 !== t.payload.response.data.errorCode && i.b.error(t.payload.response.data.errorMessage), t && t.payload && 0 === t.payload.errorCode && (i.b.success(t.payload.errorMessage), h(""), m(""), a.push("/")) }, C = () => { g(!1) }; return c || x ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "login-background", children: Object(M.jsxs)("div", { className: "container", children: [Object(M.jsxs)("div", { className: "row", children: [Object(M.jsx)("div", { className: "col-3" }), Object(M.jsx)("div", { className: "login-container col-12 col-md-6 col-lg-6", children: Object(M.jsx)("div", { className: "login-content row", children: Object(M.jsxs)("form", { className: "row g-3", children: [Object(M.jsx)("div", { className: "col-12 login-title", children: "LOGIN" }), Object(M.jsxs)("div", { className: "col-12 mt-3", children: [Object(M.jsx)("label", { htmlFor: "email", children: "Email" }), Object(M.jsx)("input", { value: b, onChange: e => h(e.target.value), id: "email", type: "text", className: "form-control", placeholder: "Enter your email" })] }), Object(M.jsxs)("div", { className: "col-12 mt-3", children: [Object(M.jsx)("label", { htmlFor: "password", children: "Password" }), Object(M.jsxs)("div", { className: "input-password", children: [Object(M.jsx)("input", { onKeyDown: e => (e => { "Enter" === e.key && 13 === e.keyCode && v() })(e), value: p, onChange: e => m(e.target.value), id: "password", type: d ? "text" : "password", className: "form-control", placeholder: "Enter your password" }), Object(M.jsx)("span", { onClick: () => j(!d), children: Object(M.jsx)("i", { className: d ? "fas fa-eye" : "fas fa-eye-slash" }) })] })] }), Object(M.jsx)("div", { className: "col-12 mt-3", children: Object(M.jsx)("button", { onClick: () => v(), className: "customized-btn", type: "button", children: "Login" }) }), Object(M.jsx)("div", { className: "col-12 mt-3", children: Object(M.jsx)("span", { onClick: () => { g(!0) }, className: "forgot-password", children: "Forgot your password?" }) }), Object(M.jsx)("hr", { className: "mt-3" }), Object(M.jsx)("div", { className: "col-12", children: Object(M.jsx)("button", { onClick: () => { a.push("/register") }, className: "customized-btn", type: "button", children: "Create a new account" }) }), Object(M.jsx)("div", { className: "col-12 my-3", children: Object(M.jsx)("button", { onClick: () => { a.push("/") }, className: "btn btn-comback-customize", children: "Come Back" }) })] }) }) }), Object(M.jsx)("div", { className: "col-3" })] }), Object(M.jsx)(ce, { passwordModalShow: O, passwordModalClose: C })] }) }) }; s(163); var ie = e => { const a = Object(o.b)(), s = Object(n.g)(), c = Object(o.c)((e => e.user.isAuthenticated)), r = Object(o.c)((e => e.user.user)), l = Object(o.c)((e => e.user.isRegistering)), [d, j] = Object(t.useState)(!1), [b, h] = Object(t.useState)(!1), [p, m] = Object(t.useState)(""), [u, O] = Object(t.useState)(""), [x, v] = Object(t.useState)(""), [C, N] = Object(t.useState)(""), [y, f] = Object(t.useState)(""), [w, k] = Object(t.useState)(""), [B, L] = Object(t.useState)(""), [S, F] = Object(t.useState)(""), [U, E] = Object(t.useState)(""), I = async () => { if ((() => { let e = [p, u, x, C, y, w, B, S, U], a = ["email", "password", "confirmPassword", "firstName", "lastName", "address", "phoneNumber", "gender", "groupId"]; for (let s = 0; s < e.length; s++)if (!e[s]) return i.b.error("Missing parameter: " + a[s]), !1; return !0 })()) { if (!!/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(p) || (i.b.error("Your email address is not valid"), !1)) { if (u.length >= 8 || (i.b.error("Your password is too short"), !1)) { if (u === x || (i.b.error("Your confirmPassword is incorrect"), !1)) { let e = { email: p, password: u, confirmPassword: x, firstName: C, lastName: y, address: w, phoneNumber: B, gender: S, groupId: U }, t = await a(g(e)); t && t.payload && t.payload.response && t.payload.response.data && 0 !== t.payload.response.data.errorCode && i.b.error(t.payload.response.data.errorMessage), t && t.payload && 0 === t.payload.errorCode && (i.b.success(t.payload.errorMessage), m(""), O(""), v(""), k(""), N(""), f(""), L(""), F(""), E(""), s.push("/login")) } } } } }; Object(t.useEffect)((() => { c && r && s.push("/") }), []); return l ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "register-background", children: Object(M.jsx)("div", { className: "container", children: Object(M.jsxs)("div", { className: "row", children: [Object(M.jsx)("div", { className: "col-3" }), Object(M.jsx)("div", { className: "register-container col-12 col-md-6 col-lg-6", children: Object(M.jsx)("div", { className: "register-content row", children: Object(M.jsxs)("form", { className: "row g-2", children: [Object(M.jsx)("div", { className: "col-12 register-title", children: "REGISTER" }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "inputEmail", children: "Email" }), Object(M.jsx)("input", { value: p, onChange: e => m(e.target.value), id: "inputEmail", type: "email", className: "form-control", placeholder: "example@gmail.com" })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "inputPassword", children: "Password" }), Object(M.jsxs)("div", { className: "input-password", children: [Object(M.jsx)("input", { value: u, onChange: e => O(e.target.value), id: "password", type: d ? "text" : "password", className: "form-control", placeholder: "Enter your password" }), Object(M.jsx)("span", { onClick: () => j(!d), children: Object(M.jsx)("i", { className: d ? "fas fa-eye" : "fas fa-eye-slash" }) })] })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "inputConfirmPassword", children: "Confirm Password" }), Object(M.jsxs)("div", { className: "input-password", children: [Object(M.jsx)("input", { value: x, onChange: e => v(e.target.value), id: "inputConfirmPassword", type: b ? "text" : "password", className: "form-control", placeholder: "Confirm your Password" }), Object(M.jsx)("span", { onClick: () => h(!b), children: Object(M.jsx)("i", { className: b ? "fas fa-eye" : "fas fa-eye-slash" }) })] })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputFirstName", children: "First name" }), Object(M.jsx)("input", { value: C, onChange: e => N(e.target.value), id: "inputFirstName", type: "text", className: "form-control", placeholder: "First name" })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputLastName", children: "Last name" }), Object(M.jsx)("input", { value: y, onChange: e => f(e.target.value), id: "inputLastName", type: "text", className: "form-control", placeholder: "Last name" })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "inputAddress", children: "Address" }), Object(M.jsx)("input", { value: w, onChange: e => k(e.target.value), id: "inputAddress", type: "text", className: "form-control", placeholder: "1234 Main St" })] }), Object(M.jsxs)("div", { className: "col-4", children: [Object(M.jsx)("label", { htmlFor: "inputPhoneNumber", children: "Phone" }), Object(M.jsx)("input", { value: B, onChange: e => L(e.target.value), id: "inputPhoneNumber", type: "text", className: "form-control" })] }), Object(M.jsxs)("div", { className: "col-4", children: [Object(M.jsx)("label", { htmlFor: "inputGender", children: "Gender" }), Object(M.jsxs)("select", { value: S, onChange: e => F(e.target.value), id: "inputGender", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "1", children: "Male" }), Object(M.jsx)("option", { value: "0", children: "Female" })] })] }), Object(M.jsxs)("div", { className: "col-4", children: [Object(M.jsx)("label", { htmlFor: "inputGroupId", children: "Group" }), Object(M.jsxs)("select", { value: U, onChange: e => E(e.target.value), id: "inputGroupId", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "2", children: "Customer" }), Object(M.jsx)("option", { value: "1", children: "Worker" }), Object(M.jsx)("option", { value: "3", children: "Manager" })] })] }), Object(M.jsx)("hr", { className: "mt-3" }), Object(M.jsx)("div", { className: "col-12 mt-3", children: Object(M.jsx)("button", { onClick: () => I(), className: "customized-btn", type: "button", children: "Register" }) }), Object(M.jsx)("div", { className: "col-12 my-3", children: Object(M.jsx)("button", { onClick: () => { s.push("/login") }, className: "btn btn-comback-customize", children: "Come Back" }) })] }) }) }), Object(M.jsx)("div", { className: "col-3" })] }) }) }) }, ne = (s(164), s(50)), le = s.n(ne); var oe = e => Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.show, onHide: e.handleClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsx)(te.a.Title, { children: "Confirm delete user" }) }), Object(M.jsxs)(te.a.Body, { children: ["Are you sure to delete this user: ", e.dataModalDelete.email, "?"] }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.handleClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-danger", onClick: e.handleDeleteUser, children: "Confirm" })] })] }) }), de = s(51), je = s.n(de); var be = e => { const a = e.dataModalUpdate, s = e.page, c = e.limit, [r, n] = Object(t.useState)({ firstName: "", lastName: "", address: "", phoneNumber: "", gender: "" }), l = Object(o.b)(); Object(t.useEffect)((() => { a && n(a) }), [a]); const d = (e, a) => { let s = je.a.cloneDeep(r); s[a] = e, n(s) }; return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.updateShow, onHide: e.handleUpdateClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsxs)(te.a.Title, { children: ["Update User: ", a.email] }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsxs)("form", { className: "row g-3", children: [Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputFirstName", children: "First name" }), Object(M.jsx)("input", { value: r.firstName, onChange: e => d(e.target.value, "firstName"), id: "inputFirstName", type: "text", className: "form-control", placeholder: "First name" })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputLastName", children: "Last name" }), Object(M.jsx)("input", { value: r.lastName, onChange: e => d(e.target.value, "lastName"), id: "inputLastName", type: "text", className: "form-control", placeholder: "Last name" })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "inputAddress", children: "Address" }), Object(M.jsx)("input", { value: r.address, onChange: e => d(e.target.value, "address"), id: "inputAddress", type: "text", className: "form-control", placeholder: "1234 Main St" })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputPhoneNumber", children: "Phone number" }), Object(M.jsx)("input", { value: r.phoneNumber, onChange: e => d(e.target.value, "phoneNumber"), id: "inputPhoneNumber", type: "text", className: "form-control" })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputGender", children: "Gender" }), Object(M.jsxs)("select", { value: r.gender, onChange: e => d(e.target.value, "gender"), id: "inputGender", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "1", children: "Male" }), Object(M.jsx)("option", { value: "0", children: "Female" })] })] })] }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.handleUpdateClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => (async () => { let a = await l(y(r)); a && a.payload && a.payload.response && a.payload.response.data && 0 !== a.payload.response.data.errorCode && i.b.error(a.payload.response.data.errorMessage), a && a.payload && 0 === a.payload.errorCode && (i.b.success(a.payload.errorMessage), e.handleUpdateClose(), l(x({ page: s, limit: c }))) })(), children: "Update" })] })] }) }) }, he = s(37); var pe = e => { const a = Object(o.b)(), s = Object(n.g)(), [c, r] = Object(t.useState)(0), [l, d] = Object(t.useState)(0), j = Object(o.c)((e => e.user.totalPages)), b = Object(o.c)((e => e.user.listUsers)), h = Object(o.c)((e => e.user.isLoadingAllUsers)), [p, m] = Object(t.useState)(1), [u, O] = Object(t.useState)(4), g = Object(o.c)((e => e.user.isDeletingUser)), [v, C] = Object(t.useState)(!1), [y, f] = Object(t.useState)({}), w = Object(o.c)((e => e.user.isUpdatingUser)), [k, B] = Object(t.useState)(!1), [L, S] = Object(t.useState)({}); Object(t.useEffect)((() => { a(x({ page: p, limit: u })) }), [p]), Object(t.useEffect)((() => { let e = window.innerWidth, a = window.innerHeight; r(a), d(e) }), [l, c]); return Object(M.jsx)(he.Scrollbars, { style: { width: l, height: c }, children: Object(M.jsxs)("div", { className: "users-container", children: [Object(M.jsxs)("div", { className: "container", children: [Object(M.jsx)("h1", { className: "user-title", children: "MANAGE USER" }), Object(M.jsxs)("table", { className: "table table-hover customers mt-3", children: [Object(M.jsx)("thead", { children: Object(M.jsxs)("tr", { children: [Object(M.jsx)("th", { scope: "col", children: "ID" }), Object(M.jsx)("th", { scope: "col", children: "Email" }), Object(M.jsx)("th", { scope: "col", children: "FirstName" }), Object(M.jsx)("th", { scope: "col", children: "LastName" }), Object(M.jsx)("th", { scope: "col", children: "Group" }), Object(M.jsx)("th", { scope: "col", children: "Actions" })] }) }), h || g || w ? Object(M.jsx)("tbody", { children: Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6, children: Object(M.jsx)(X, {}) }) }) }) : Object(M.jsx)("tbody", { children: b && b.length > 0 ? b.map(((e, a) => Object(M.jsxs)("tr", { children: [Object(M.jsx)("td", { children: e.id }), Object(M.jsx)("td", { children: e.email }), Object(M.jsx)("td", { children: e.firstName }), Object(M.jsx)("td", { children: e.lastName }), Object(M.jsx)("td", { children: e.Group.name }), Object(M.jsx)("td", { children: Object(M.jsxs)("div", { className: "action-container", children: [Object(M.jsx)("button", { onClick: () => { return a = e, B(!0), void S(a); var a }, className: "btn btn-warning", children: "Edit" }), Object(M.jsx)("button", { onClick: () => (f(e), void C(!0)), className: "btn btn-danger", children: "Delete" }), Object(M.jsx)("button", { className: "btn btn-success", onClick: () => { return a = e, void s.push("/user/detail?id=".concat(a.id)); var a }, children: "Detail" })] }) })] }, "user-".concat(a)))) : Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6 }) }) })] }), j && j > 0 && Object(M.jsx)(le.a, { nextLabel: "next >", onPageChange: e => { m(e.selected + 1) }, pageRangeDisplayed: 2, marginPagesDisplayed: 2, pageCount: j, previousLabel: "< previous", pageClassName: "page-item", pageLinkClassName: "page-link", previousClassName: "page-item", previousLinkClassName: "page-link", nextClassName: "page-item", nextLinkClassName: "page-link", breakLabel: "...", breakClassName: "page-item", breakLinkClassName: "page-link", containerClassName: "pagination", activeClassName: "active", renderOnZeroPageCount: null })] }), Object(M.jsx)(oe, { show: v, handleClose: () => { f({}), C(!1) }, dataModalDelete: y, handleDeleteUser: async () => { let e = y.id, s = await a(N(e)); if (s && s.payload && s.payload.response && s.payload.response.data && 0 !== s.payload.response.data.errorCode && i.b.error(s.payload.response.data.errorMessage), s && s.payload && 0 === s.payload.errorCode) { let e = { page: p, limit: u }; await a(x(e)), i.b.success(s.payload.errorMessage), C(!1) } } }), Object(M.jsx)(be, { updateShow: k, handleUpdateClose: () => { B(!1), S({}) }, dataModalUpdate: L, page: p, limit: u })] }) }) }; s(181); var me = e => { const a = e.page, s = e.limit, [c, r] = Object(t.useState)(""), [n, l] = Object(t.useState)(""), [d, j] = Object(t.useState)(""), [b, h] = Object(t.useState)(""), p = Object(o.b)(), m = async () => { if ((() => { let e = !0, a = [c, n, d, b], s = ["name", "model", "description", "image"]; for (let t = 0; t < a.length; t++)if (!a[t]) return e = !1, void i.b.error("Missing parameter ".concat(s[t])); return e })()) { let t = { name: c, model: n, description: d, image: b }, o = await p(G(t)); if (o && o.payload && o.payload.response && o.payload.response.data && 0 !== o.payload.response.data.errorCode && i.b.error(o.payload.response.data.errorMessage), o && o.payload && 0 === o.payload.errorCode) { r(""), l(""), j(""), h(""), i.b.success(o.payload.errorMessage), e.createCarClose(), p(H({ page: a, limit: s })) } } }; return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { size: "lg", show: e.createCarShow, onHide: e.createCarClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsx)(te.a.Title, { children: "Create a new car" }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsxs)("form", { className: "row g-3", children: [Object(M.jsxs)("div", { className: "col-8", children: [Object(M.jsx)("label", { htmlFor: "carName", children: "Car name" }), Object(M.jsx)("input", { value: c, onChange: e => r(e.target.value), id: "carName", type: "text", className: "form-control", placeholder: "name" })] }), Object(M.jsxs)("div", { className: "col-4", children: [Object(M.jsx)("label", { htmlFor: "model", children: "Car model" }), Object(M.jsxs)("select", { value: n, onChange: e => l(e.target.value), id: "model", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "bmw", children: "bmw" }), Object(M.jsx)("option", { value: "ferrari", children: "ferrari" }), Object(M.jsx)("option", { value: "lamborghini", children: "lamborghini" })] })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "carDescription", children: "Car description" }), Object(M.jsx)("textarea", { style: { height: "300px" }, value: d, onChange: e => j(e.target.value), id: "carDescription", type: "text", className: "form-control", placeholder: "description" })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "carImage", children: "Car image url" }), Object(M.jsx)("input", { value: b, onChange: e => h(e.target.value), id: "carImage", type: "text", className: "form-control", placeholder: "enter image url" })] })] }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.createCarClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => m(), children: "Create" })] })] }) }) }; var ue = e => { var a; return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.deleteCarShow, onHide: e.deleteCarClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsx)(te.a.Title, { children: "Confirm delete car" }) }), Object(M.jsxs)(te.a.Body, { children: ["Are you sure to delete this car: ", null === (a = e.dataDeleteModal) || void 0 === a ? void 0 : a.name, "?"] }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.deleteCarClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-danger", onClick: e.handleDeleteCar, children: "Confirm" })] })] }) }) }; var Oe = e => { const a = e.dataUpdateModal, s = e.page, c = e.limit, [r, n] = Object(t.useState)({ name: "", model: "", description: "", image: "" }), l = Object(o.b)(); Object(t.useEffect)((() => { a && n(a) }), [a]); const d = (e, a) => { let s = je.a.cloneDeep(r); s[a] = e, n(s) }; return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { size: "lg", show: e.updateCarShow, onHide: e.updateCarClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsxs)(te.a.Title, { children: ["Update a car: ", null === a || void 0 === a ? void 0 : a.name] }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsxs)("form", { className: "row g-3", children: [Object(M.jsxs)("div", { className: "col-8", children: [Object(M.jsx)("label", { htmlFor: "carName", children: "Car name" }), Object(M.jsx)("input", { value: r.name, onChange: e => d(e.target.value, "name"), id: "carName", type: "text", className: "form-control", placeholder: "name" })] }), Object(M.jsxs)("div", { className: "col-4", children: [Object(M.jsx)("label", { htmlFor: "model", children: "Car model" }), Object(M.jsxs)("select", { value: r.model, onChange: e => d(e.target.value, "model"), id: "model", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "bmw", children: "bmw" }), Object(M.jsx)("option", { value: "ferrari", children: "ferrari" }), Object(M.jsx)("option", { value: "lamborghini", children: "lamborghini" })] })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "carDescription", children: "Car description" }), Object(M.jsx)("textarea", { style: { height: "300px" }, value: r.description, onChange: e => d(e.target.value, "description"), id: "carDescription", type: "text", className: "form-control", placeholder: "description" })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "carImage", children: "Car image url" }), Object(M.jsx)("input", { value: r.image, onChange: e => d(e.target.value, "image"), id: "carImage", type: "text", className: "form-control", placeholder: "enter image url" })] })] }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.updateCarClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => (async () => { let a = await l(z(r)); a && a.payload && a.payload.response && a.payload.response.data && 0 !== a.payload.response.data.errorCode && i.b.error(a.payload.response.data.errorMessage), a && a.payload && 0 === a.payload.errorCode && (i.b.success(a.payload.errorMessage), e.updateCarClose(), l(H({ page: s, limit: c }))) })(), children: "Save" })] })] }) }) }; var ge = e => { const a = Object(o.b)(), [s, c] = Object(t.useState)(0), [r, n] = Object(t.useState)(0), l = Object(o.c)((e => e.car.totalCarPages)), d = Object(o.c)((e => e.car.carList)), j = Object(o.c)((e => e.car.isLoadingAllUsers)), [b, h] = Object(t.useState)(1), [p, m] = Object(t.useState)(4), [u, O] = Object(t.useState)(!1), g = Object(o.c)((e => e.car.isCreatingCar)), [x, v] = Object(t.useState)(!1), [C, N] = Object(t.useState)({}), y = Object(o.c)((e => e.car.isDeletingCar)), [f, w] = Object(t.useState)(!1), [k, B] = Object(t.useState)({}), L = Object(o.c)((e => e.car.isUpdatingCar)); Object(t.useEffect)((() => { a(H({ page: b, limit: p })) }), [b]), Object(t.useEffect)((() => { let e = window.innerWidth, a = window.innerHeight; c(a), n(e) }), [r, s]); return Object(M.jsx)(he.Scrollbars, { style: { width: r, height: s }, children: Object(M.jsx)("div", { className: "car-container", children: Object(M.jsxs)("div", { className: "container", children: [Object(M.jsx)("h1", { className: "car-title", children: "MANAGE CAR" }), Object(M.jsx)("button", { onClick: () => { O(!0) }, className: "btn btn-primary mb-2", children: "Add Car" }), Object(M.jsxs)("table", { className: "table table-hover customers mt-3", children: [Object(M.jsx)("thead", { children: Object(M.jsxs)("tr", { children: [Object(M.jsx)("th", { scope: "col", children: "ID" }), Object(M.jsx)("th", { scope: "col", children: "name" }), Object(M.jsx)("th", { scope: "col", children: "model" }), Object(M.jsx)("th", { scope: "col", children: "image" }), Object(M.jsx)("th", { scope: "col", children: "Actions" })] }) }), j || g || y || L ? Object(M.jsx)("tbody", { children: Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6, children: Object(M.jsx)(X, {}) }) }) }) : Object(M.jsx)("tbody", { children: d && d.length > 0 ? d.map(((e, a) => Object(M.jsxs)("tr", { children: [Object(M.jsx)("td", { children: e.id }), Object(M.jsx)("td", { children: e.name }), Object(M.jsx)("td", { children: e.model }), Object(M.jsx)("td", { children: e.image }), Object(M.jsx)("td", { children: Object(M.jsxs)("div", { className: "action-container", children: [Object(M.jsx)("button", { onClick: () => { return a = e, w(!0), void B(a); var a }, className: "btn btn-warning", children: "Edit" }), Object(M.jsx)("button", { onClick: () => (N(e), void v(!0)), className: "btn btn-danger", children: "Delete" })] }) })] }, "car-".concat(a)))) : Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6 }) }) })] }), l && l > 0 && Object(M.jsx)(le.a, { nextLabel: "next >", onPageChange: e => { h(e.selected + 1) }, pageRangeDisplayed: 2, marginPagesDisplayed: 2, pageCount: l, previousLabel: "< previous", pageClassName: "page-item", pageLinkClassName: "page-link", previousClassName: "page-item", previousLinkClassName: "page-link", nextClassName: "page-item", nextLinkClassName: "page-link", breakLabel: "...", breakClassName: "page-item", breakLinkClassName: "page-link", containerClassName: "pagination", activeClassName: "active", renderOnZeroPageCount: null }), Object(M.jsx)(me, { createCarShow: u, createCarClose: () => { O(!1) }, page: b, limit: p }), Object(M.jsx)(ue, { deleteCarShow: x, deleteCarClose: () => { N({}), v(!1) }, dataDeleteModal: C, handleDeleteCar: async () => { let e = null === C || void 0 === C ? void 0 : C.id; if (e) { let s = await a(T(e)); if (s && s.payload && s.payload.response && s.payload.response.data && 0 !== s.payload.response.data.errorCode && i.b.error(s.payload.response.data.errorMessage), s && s.payload && 0 === s.payload.errorCode) { i.b.success(s.payload.errorMessage), v(!1), a(H({ page: b, limit: p })) } } } }), Object(M.jsx)(Oe, { updateCarShow: f, updateCarClose: () => { w(!1), B({}) }, dataUpdateModal: k, page: b, limit: p })] }) }) }) }; s(182); const xe = Object(d.b)("booking/getProcessBooking", (async e => { try { const a = await (e => m.get("/api/booking/get-process-bookings?page=".concat(e.page, "&limit=").concat(e.limit)))(e); return a } catch (a) { return a } })), ve = Object(d.b)("booking/creatNewBooking", (async (e, a) => { let { rejectWithValue: s } = a; try { const a = await (e => m.post("/api/booking/create-new-booking", { time: e.time, carId: e.carId, userId: e.userId, firstName: e.firstName, email: e.email, carName: e.carName }))(e); return a } catch (t) { return s(t) } })), Ce = Object(d.b)("booking/deleteBooking", (async e => { try { const a = await (e => m.delete("/api/booking/delete-booking", { data: { bookingId: e } }))(e); return a } catch (a) { return a } })), Ne = Object(d.b)("booking/updateBooking", (async e => { try { const a = await (e => m.put("/api/booking/update-booking", { id: e.id, status: e.status, time: e.time }))(e); return a } catch (a) { return a } })), ye = Object(d.b)("booking/getBookingById", (async e => { try { const a = await (e => m.get("/api/booking/get-one-booking?userId=".concat(e)))(e); return a } catch (a) { return a } })), fe = Object(d.b)("booking/cancelBooking", (async e => { try { const a = await (e => m.put("/api/booking/cancel-booking", { bookingId: e }))(e); return a } catch (a) { return a } })); var we = Object(d.c)({ name: "booking", initialState: { isBookingError: null, isLoadingAllBookings: !1, bookingList: [], totalBookingPages: 0, isCreatingBooking: !1, isDeletingBooking: !1, isUpdatingBooking: !1, isLoadingBookingById: !1, detailBooking: null, isCancelingBooking: !1 }, reducers: {}, extraReducers: e => { e.addCase(xe.pending, ((e, a) => { e.isLoadingAllBookings = !0 })).addCase(xe.fulfilled, ((e, a) => { var s, t, c, r; e.isLoadingAllBookings = !1, e.bookingList = null === (s = a.payload) || void 0 === s || null === (t = s.data) || void 0 === t ? void 0 : t.bookings, e.totalBookingPages = null === (c = a.payload) || void 0 === c || null === (r = c.data) || void 0 === r ? void 0 : r.totalBookingPages })).addCase(xe.rejected, ((e, a) => { e.isLoadingAllBookings = !1, e.isBookingError = a.payload.message })).addCase(ve.pending, ((e, a) => { e.isCreatingBooking = !0 })).addCase(ve.fulfilled, ((e, a) => { e.isCreatingBooking = !1 })).addCase(ve.rejected, ((e, a) => { e.isCreatingBooking = !1, e.isBookingError = a.payload.message })).addCase(Ce.pending, ((e, a) => { e.isDeletingBooking = !0 })).addCase(Ce.fulfilled, ((e, a) => { e.isDeletingBooking = !1 })).addCase(Ce.rejected, ((e, a) => { e.isDeletingBooking = !1, e.isBookingError = a.payload.message })).addCase(Ne.pending, ((e, a) => { e.isUpdatingBooking = !0 })).addCase(Ne.fulfilled, ((e, a) => { e.isUpdatingBooking = !1 })).addCase(Ne.rejected, ((e, a) => { e.isUpdatingBooking = !1, e.isBookingError = a.payload.message })).addCase(ye.pending, ((e, a) => { e.isLoadingBookingById = !0 })).addCase(ye.fulfilled, ((e, a) => { var s; e.isLoadingBookingById = !1, e.detailBooking = null === (s = a.payload) || void 0 === s ? void 0 : s.data })).addCase(ye.rejected, ((e, a) => { e.isLoadingBookingById = !1, e.isBookingError = a.payload.message })).addCase(fe.pending, ((e, a) => { e.isCancelingBooking = !0 })).addCase(fe.fulfilled, ((e, a) => { e.isCancelingBooking = !1 })).addCase(fe.rejected, ((e, a) => { e.isCancelingBooking = !1, e.isBookingError = a.payload.message })) } }).reducer; var ke = e => { var a; return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.deleteBookingShow, onHide: e.deleteBookingClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsxs)(te.a.Title, { children: ["Confirm delete booking: ID ", null === (a = e.dataDeleteModal) || void 0 === a ? void 0 : a.id] }) }), Object(M.jsx)(te.a.Body, { children: "Are you sure to delete this booking?" }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.deleteBookingClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-danger", onClick: e.handleDeleteBooking, children: "Confirm" })] })] }) }) }; var Be = e => { const a = e.dataUpdateModal, s = e.page, c = e.limit, [r, n] = Object(t.useState)(""), [l, d] = Object(t.useState)(""), j = Object(o.b)(); Object(t.useEffect)((() => { a && (n(null === a || void 0 === a ? void 0 : a.status), d(null === a || void 0 === a ? void 0 : a.time)) }), [a]); return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { size: "lg", show: e.updateBookingShow, onHide: e.updateBookingClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsxs)(te.a.Title, { children: ["Update a booking: ID ", null === a || void 0 === a ? void 0 : a.id] }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsxs)("form", { className: "row g-3", children: [Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "status", children: "status" }), Object(M.jsxs)("select", { value: r, onChange: e => n(e.target.value), id: "status", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "processing", children: "processing" }), Object(M.jsx)("option", { value: "completed", children: "completed" }), Object(M.jsx)("option", { value: "cancel", children: "cancel" })] })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "time", children: "Select time" }), Object(M.jsxs)("select", { value: l, onChange: e => d(e.target.value), id: "time", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "08:00", children: "08:00" }), Object(M.jsx)("option", { value: "09:00", children: "09:00" }), Object(M.jsx)("option", { value: "10:00", children: "10:00" }), Object(M.jsx)("option", { value: "11:00", children: "11:00" }), Object(M.jsx)("hr", {}), Object(M.jsx)("option", { value: "13:00", children: "13:00" }), Object(M.jsx)("option", { value: "14:00", children: "14:00" }), Object(M.jsx)("option", { value: "15:00", children: "15:00" }), Object(M.jsx)("option", { value: "16:00", children: "16:00" })] })] })] }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.updateBookingClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => (async () => { let t = { id: null === a || void 0 === a ? void 0 : a.id, status: r, time: l }, n = await j(Ne(t)); n && n.payload && n.payload.response && n.payload.response.data && 0 !== n.payload.response.data.errorCode && i.b.error(n.payload.response.data.errorMessage), n && n.payload && 0 === n.payload.errorCode && (i.b.success(n.payload.errorMessage), e.updateBookingClose(), j(xe({ page: s, limit: c }))) })(), children: "Save" })] })] }) }) }; var Le = e => { const a = Object(o.b)(), [s, c] = Object(t.useState)(0), [r, n] = Object(t.useState)(0), l = Object(o.c)((e => e.booking.totalBookingPages)), d = Object(o.c)((e => e.booking.bookingList)), j = Object(o.c)((e => e.booking.isLoadingAllBookings)), [b, h] = Object(t.useState)(1), [p, m] = Object(t.useState)(4), [u, O] = Object(t.useState)(!1), [g, x] = Object(t.useState)({}), v = Object(o.c)((e => e.booking.isDeletingBooking)), [C, N] = Object(t.useState)(!1), [y, f] = Object(t.useState)({}), w = Object(o.c)((e => e.booking.isUpdatingBooking)); Object(t.useEffect)((() => { a(xe({ page: b, limit: p })) }), [b]), Object(t.useEffect)((() => { let e = window.innerWidth, a = window.innerHeight; c(a), n(e) }), [r, s]); return Object(M.jsx)(he.Scrollbars, { style: { width: r, height: s }, children: Object(M.jsx)("div", { className: "manage-booking-container", children: Object(M.jsxs)("div", { className: "container", children: [Object(M.jsx)("h1", { className: "manage-booking-title", children: "MANAGE BOOKING" }), Object(M.jsxs)("table", { className: "table table-hover customers mt-3", children: [Object(M.jsx)("thead", { children: Object(M.jsxs)("tr", { children: [Object(M.jsx)("th", { scope: "col", children: "ID" }), Object(M.jsx)("th", { scope: "col", children: "status" }), Object(M.jsx)("th", { scope: "col", children: "time" }), Object(M.jsx)("th", { scope: "col", children: "userName" }), Object(M.jsx)("th", { scope: "col", children: "carName" }), Object(M.jsx)("th", { scope: "col", children: "actions" })] }) }), j || v || w ? Object(M.jsx)("tbody", { children: Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6, children: Object(M.jsx)(X, {}) }) }) }) : Object(M.jsx)("tbody", { children: d && d.length > 0 ? d.map(((e, a) => { var s, t; return Object(M.jsxs)("tr", { children: [Object(M.jsx)("td", { children: e.id }), Object(M.jsx)("td", { children: e.status }), Object(M.jsx)("td", { children: e.time }), Object(M.jsx)("td", { children: null === e || void 0 === e || null === (s = e.User) || void 0 === s ? void 0 : s.firstName }), Object(M.jsx)("td", { children: null === e || void 0 === e || null === (t = e.Car) || void 0 === t ? void 0 : t.name }), Object(M.jsx)("td", { children: Object(M.jsxs)("div", { className: "action-container", children: [Object(M.jsx)("button", { onClick: () => (f(e), void N(!0)), className: "btn btn-warning", children: "Edit" }), Object(M.jsx)("button", { onClick: () => (x(e), void O(!0)), className: "btn btn-danger", children: "Delete" })] }) })] }, "booking-".concat(a)) })) : Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6 }) }) })] }), l && l > 0 && Object(M.jsx)(le.a, { nextLabel: "next >", onPageChange: e => { h(e.selected + 1) }, pageRangeDisplayed: 2, marginPagesDisplayed: 2, pageCount: l, previousLabel: "< previous", pageClassName: "page-item", pageLinkClassName: "page-link", previousClassName: "page-item", previousLinkClassName: "page-link", nextClassName: "page-item", nextLinkClassName: "page-link", breakLabel: "...", breakClassName: "page-item", breakLinkClassName: "page-link", containerClassName: "pagination", activeClassName: "active", renderOnZeroPageCount: null }), Object(M.jsx)(ke, { deleteBookingShow: u, deleteBookingClose: () => { x({}), O(!1) }, handleDeleteBooking: async () => { let e = null === g || void 0 === g ? void 0 : g.id; if (e) { let s = await a(Ce(e)); if (s && s.payload && s.payload.response && s.payload.response.data && 0 !== s.payload.response.data.errorCode && i.b.error(s.payload.response.data.errorMessage), s && s.payload && 0 === s.payload.errorCode) { i.b.success(s.payload.errorMessage), O(!1), a(xe({ page: b, limit: p })) } } }, dataDeleteModal: g }), Object(M.jsx)(Be, { updateBookingShow: C, updateBookingClose: () => { f({}), N(!1) }, dataUpdateModal: y, page: b, limit: p })] }) }) }) }; s(183); var Se = e => Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.cancelBookingShow, onHide: e.cancelBookingClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsx)(te.a.Title, { children: "Confirm cancel booking" }) }), Object(M.jsx)(te.a.Body, { children: "Are you sure to cancel this booking?" }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.cancelBookingClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-danger", onClick: e.handleCancelBooking, children: "Confirm" })] })] }) }); var Fe = e => { var a, s; const [c, r] = Object(t.useState)(0), [n, l] = Object(t.useState)(0), d = Object(o.b)(), j = Object(o.c)((e => e.booking.isLoadingBookingById)), b = Object(o.c)((e => e.booking.detailBooking)), h = Object(o.c)((e => e.user.user)), [p, m] = Object(t.useState)(!1), u = Object(o.c)((e => e.booking.isCancelingBooking)); Object(t.useEffect)((() => { let e = null === h || void 0 === h ? void 0 : h.id; e && d(ye(e)) }), []), Object(t.useEffect)((() => { let e = window.innerWidth, a = window.innerHeight; r(a), l(e) }), [n, c]); return Object(M.jsx)(he.Scrollbars, { style: { width: n, height: c }, children: Object(M.jsx)("div", { className: "booking-container", children: Object(M.jsx)("div", { className: "container", children: Object(M.jsxs)("div", { className: "row", children: [Object(M.jsx)("h1", { className: "booking-title", children: "YOUR BOOKING" }), Object(M.jsxs)("table", { className: "table table-hover customers mt-3 col-12", children: [Object(M.jsx)("thead", { children: Object(M.jsxs)("tr", { children: [Object(M.jsx)("th", { scope: "col", children: "ID" }), Object(M.jsx)("th", { scope: "col", children: "status" }), Object(M.jsx)("th", { scope: "col", children: "time" }), Object(M.jsx)("th", { scope: "col", children: "userName" }), Object(M.jsx)("th", { scope: "col", children: "carName" }), Object(M.jsx)("th", { scope: "col", children: "action" })] }) }), j || u ? Object(M.jsx)("tbody", { children: Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6, children: Object(M.jsx)(X, {}) }) }) }) : Object(M.jsx)("tbody", { children: b ? Object(M.jsxs)("tr", { children: [Object(M.jsx)("td", { children: b.id }), Object(M.jsx)("td", { children: b.status }), Object(M.jsx)("td", { children: b.time }), Object(M.jsx)("td", { children: null === b || void 0 === b || null === (a = b.User) || void 0 === a ? void 0 : a.firstName }), Object(M.jsx)("td", { children: null === b || void 0 === b || null === (s = b.Car) || void 0 === s ? void 0 : s.name }), Object(M.jsx)("td", { children: Object(M.jsx)("div", { className: "action-container", children: Object(M.jsx)("button", { onClick: () => { m(!0) }, className: "btn btn-danger", children: "Cancel" }) }) })] }) : Object(M.jsx)("tr", { children: Object(M.jsx)("td", { colSpan: 6, children: Object(M.jsx)("h3", { style: { textAlign: "center" }, children: "You don't have any booking" }) }) }) })] }), Object(M.jsx)(Se, { cancelBookingShow: p, cancelBookingClose: () => { m(!1) }, handleCancelBooking: async () => { let e = null === b || void 0 === b ? void 0 : b.id; if (e) { let a = await d(fe(e)); if (a && a.payload && a.payload.response && a.payload.response.data && 0 !== a.payload.response.data.errorCode && i.b.error(a.payload.response.data.errorMessage), a && a.payload && 0 === a.payload.errorCode) { i.b.success(a.payload.errorMessage); let e = null === h || void 0 === h ? void 0 : h.id; e && d(ye(e)), m(!1) } } } })] }) }) }) }) }; s(184); var Ue = e => { const a = Object(o.c)((e => e.user.user)), s = { id: null === a || void 0 === a ? void 0 : a.id, firstName: null === a || void 0 === a ? void 0 : a.firstName, lastName: null === a || void 0 === a ? void 0 : a.lastName, address: null === a || void 0 === a ? void 0 : a.address, phoneNumber: null === a || void 0 === a ? void 0 : a.phoneNumber, gender: null === a || void 0 === a ? void 0 : a.gender }, [c, r] = Object(t.useState)(s), n = Object(o.b)(), l = (e, a) => { let s = je.a.cloneDeep(c); s[a] = e, r(s) }; return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.updateModalShow, onHide: e.updateModalClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsx)(te.a.Title, { children: "Update Personal Information" }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsxs)("form", { className: "row g-3", children: [Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputFirstName", children: "First name" }), Object(M.jsx)("input", { value: c.firstName, onChange: e => l(e.target.value, "firstName"), id: "inputFirstName", type: "text", className: "form-control", placeholder: "First name" })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputLastName", children: "Last name" }), Object(M.jsx)("input", { value: c.lastName, onChange: e => l(e.target.value, "lastName"), id: "inputLastName", type: "text", className: "form-control", placeholder: "Last name" })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "inputAddress", children: "Address" }), Object(M.jsx)("input", { value: c.address, onChange: e => l(e.target.value, "address"), id: "inputAddress", type: "text", className: "form-control", placeholder: "1234 Main St" })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputPhoneNumber", children: "Phone number" }), Object(M.jsx)("input", { value: c.phoneNumber, onChange: e => l(e.target.value, "phoneNumber"), id: "inputPhoneNumber", type: "text", className: "form-control" })] }), Object(M.jsxs)("div", { className: "col-6", children: [Object(M.jsx)("label", { htmlFor: "inputGender", children: "Gender" }), Object(M.jsxs)("select", { value: c.gender, onChange: e => l(e.target.value, "gender"), id: "inputGender", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "1", children: "Male" }), Object(M.jsx)("option", { value: "0", children: "Female" })] })] })] }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.updateModalClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => (async () => { let a = await n(f(c)); a && a.payload && a.payload.response && a.payload.response.data && 0 !== a.payload.response.data.errorCode && i.b.error(a.payload.response.data.errorMessage), a && a.payload && 0 === a.payload.errorCode && (i.b.success(a.payload.errorMessage), e.updateModalClose()) })(), children: "Update" })] })] }) }) }; var Ee = e => { const a = Object(o.c)((e => e.user.user)), [s, c] = Object(t.useState)(""), [r, n] = Object(t.useState)(""), l = Object(o.b)(); return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { show: e.passwordModalShow, onHide: e.passwordModalClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsx)(te.a.Title, { children: "Change Your Password" }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsxs)("form", { className: "row g-3", children: [Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "password", children: "Password" }), Object(M.jsx)("input", { value: s, onChange: e => c(e.target.value), id: "password", type: "password", className: "form-control", placeholder: "Enter your password" })] }), Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "newPassword", children: "New password" }), Object(M.jsx)("input", { value: r, onChange: e => n(e.target.value), id: "newPassword", type: "password", className: "form-control", placeholder: "Enter your new password" })] })] }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.passwordModalClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => (async () => { let t = { userId: null === a || void 0 === a ? void 0 : a.id, password: s, newPassword: r }, c = await l(w(t)); c && c.payload && c.payload.response && c.payload.response.data && 0 !== c.payload.response.data.errorCode && i.b.error(c.payload.response.data.errorMessage), c && c.payload && 0 === c.payload.errorCode && (i.b.success(c.payload.errorMessage), e.passwordModalClose()) })(), children: "Change" })] })] }) }) }; var Me = e => { const a = Object(o.c)((e => e.user.user)), s = Object(o.c)((e => e.user.isUpdatingPersonal)), [c, r] = Object(t.useState)(!1), [i, n] = Object(t.useState)(!1), l = () => { r(!1) }, d = () => { n(!1) }; return s ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "personal-container", children: Object(M.jsxs)("div", { className: "container", children: [Object(M.jsxs)("div", { className: "row", children: [a && Object(M.jsxs)("div", { className: "personal-content col-12 col-md-8 col-lg-6", children: [Object(M.jsx)("div", { className: "personal-title", children: Object(M.jsx)("h1", { children: "Personal Information" }) }), Object(M.jsxs)("div", { className: "personal-info", children: [Object(M.jsxs)("p", { children: ["ID: ", a.id] }), Object(M.jsxs)("p", { children: ["Email: ", a.email] }), Object(M.jsxs)("p", { children: ["Fistname: ", a.firstName] }), Object(M.jsxs)("p", { children: ["Lastname: ", a.lastName] }), Object(M.jsxs)("p", { children: ["Address: ", a.address] }), Object(M.jsxs)("p", { children: ["Phonenumber: ", a.phoneNumber] }), Object(M.jsxs)("p", { children: ["Gender: ", 1 === a.gender ? "Male" : "Female"] }), Object(M.jsxs)("p", { children: ["Group: ", null === a || void 0 === a || null === (j = a.Group) || void 0 === j ? void 0 : j.name] }), Object(M.jsxs)("p", { children: ["Description: ", null === a || void 0 === a || null === (b = a.Group) || void 0 === b ? void 0 : b.description] }), Object(M.jsx)("button", { onClick: () => { r(!0) }, className: "btn btn-primary", children: "Edit" }), Object(M.jsx)("div", { className: "mt-3 mb-3" }), Object(M.jsx)("button", { onClick: () => { n(!0) }, className: "btn btn-primary", children: "Change Password" })] })] }), Object(M.jsx)("div", { className: "col-6" })] }), Object(M.jsx)(Ue, { updateModalShow: c, updateModalClose: l }), Object(M.jsx)(Ee, { passwordModalShow: i, passwordModalClose: d })] }) }); var j, b }; s(185); var Ie = e => { let a = e.location.search.split("?id=")[1]; const s = Object(o.c)((e => e.user.isLoadingUserById)), c = Object(o.c)((e => e.user.detailUser)), r = Object(n.g)(), i = Object(o.b)(); Object(t.useEffect)((() => { i(v(a)) }), [a]); return s ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "detail-user-container", children: Object(M.jsx)("div", { className: "container", children: Object(M.jsx)("div", { className: "row", children: c && Object(M.jsxs)("div", { className: "detail-content col-12 col-md-8 col-lg-6", children: [Object(M.jsx)("div", { className: "detail-title", children: Object(M.jsx)("h1", { children: "Detail User Information" }) }), Object(M.jsxs)("div", { className: "detail-info", children: [Object(M.jsxs)("p", { children: ["ID: ", c.id] }), Object(M.jsxs)("p", { children: ["Email: ", c.email] }), Object(M.jsxs)("p", { children: ["Fistname: ", c.firstName] }), Object(M.jsxs)("p", { children: ["Lastname: ", c.lastName] }), Object(M.jsxs)("p", { children: ["Address: ", c.address] }), Object(M.jsxs)("p", { children: ["Phonenumber: ", c.phoneNumber] }), Object(M.jsxs)("p", { children: ["Gender: ", 1 === c.gender ? "Male" : "Female"] }), Object(M.jsxs)("p", { children: ["Group: ", c.Group.name] }), Object(M.jsxs)("p", { children: ["Description: ", c.Group.description] }), Object(M.jsx)("button", { className: "btn btn-warning", onClick: () => { r.push("/user") }, children: "COME BACK" })] })] }) }) }) }) }; var Pe = e => { const a = Object(o.c)((e => e.user.isAuthenticated)), s = Object(o.c)((e => e.user.user)), c = Object(n.g)(); return Object(t.useEffect)((() => { a || s || c.push("/login") }), []), a && s ? Object(M.jsx)(M.Fragment, { children: Object(M.jsx)(n.b, { path: e.path, component: e.component }) }) : Object(n.a)("/login") }; s(186); var Ae = e => { const [a, s] = Object(t.useState)(""), c = Object(o.c)((e => e.user.user)), r = Object(o.c)((e => e.car.detailCar)), n = Object(o.b)(); return Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(te.a, { size: "lg", show: e.createBookingShow, onHide: e.createBookingClose, children: [Object(M.jsx)(te.a.Header, { closeButton: !0, children: Object(M.jsxs)(te.a.Title, { children: ["Booking to see car: ", null === r || void 0 === r ? void 0 : r.name] }) }), Object(M.jsx)(te.a.Body, { children: Object(M.jsx)("form", { className: "row g-3", children: Object(M.jsxs)("div", { className: "col-12", children: [Object(M.jsx)("label", { htmlFor: "time", children: "Select time" }), Object(M.jsxs)("select", { value: a, onChange: e => s(e.target.value), id: "time", className: "form-select", children: [Object(M.jsx)("option", { hidden: !0 }), Object(M.jsx)("option", { value: "08:00", children: "08:00" }), Object(M.jsx)("option", { value: "09:00", children: "09:00" }), Object(M.jsx)("option", { value: "10:00", children: "10:00" }), Object(M.jsx)("option", { value: "11:00", children: "11:00" }), Object(M.jsx)("hr", {}), Object(M.jsx)("option", { value: "13:00", children: "13:00" }), Object(M.jsx)("option", { value: "14:00", children: "14:00" }), Object(M.jsx)("option", { value: "15:00", children: "15:00" }), Object(M.jsx)("option", { value: "16:00", children: "16:00" })] })] }) }) }), Object(M.jsxs)(te.a.Footer, { children: [Object(M.jsx)(se.a, { variant: "secondary", onClick: e.createBookingClose, children: "Close" }), Object(M.jsx)(se.a, { variant: "btn btn-primary", onClick: () => (async () => { let t = null === c || void 0 === c ? void 0 : c.id, l = null === c || void 0 === c ? void 0 : c.firstName, o = null === c || void 0 === c ? void 0 : c.email, d = null === r || void 0 === r ? void 0 : r.name, j = null === r || void 0 === r ? void 0 : r.id, b = { time: a, carId: j, userId: t, email: o, carName: d, firstName: l }, h = await n(ve(b)); h && h.payload && h.payload.response && h.payload.response.data && 0 !== h.payload.response.data.errorCode && i.b.error(h.payload.response.data.errorMessage), h && h.payload && 0 === h.payload.errorCode && (s(""), i.b.success(h.payload.errorMessage), e.createBookingClose()) })(), children: "Booking" })] })] }) }) }; var De = e => { let { dataHref: a } = e; return Object(t.useEffect)((() => { window.FB && window.FB.XFBML.parse(), window.fbAsyncInit = function () { window.FB.init({ appId: "7476716895752103", cookie: !0, xfbml: !0, version: "v2.5" }) }, function (e, a, s) { var t, c = e.getElementsByTagName(a)[0]; e.getElementById(s) || ((t = e.createElement(a)).id = s, t.src = "//connect.facebook.net/en_US/sdk.js", c.parentNode.insertBefore(t, c)) }(document, "script", "facebook-jssdk") }), []), Object(M.jsx)(M.Fragment, { children: Object(M.jsx)("div", { class: "fb-like", "data-href": a, "data-width": "", "data-layout": "", "data-action": "", "data-size": "", "data-share": "true" }) }) }; var Re = e => { let { dataHref: a } = e; return Object(t.useEffect)((() => { window.FB && window.FB.XFBML.parse(), window.fbAsyncInit = function () { window.FB.init({ appId: "7476716895752103", cookie: !0, xfbml: !0, version: "v2.5" }) }, function (e, a, s) { var t, c = e.getElementsByTagName(a)[0]; e.getElementById(s) || ((t = e.createElement(a)).id = s, t.src = "//connect.facebook.net/en_US/sdk.js", c.parentNode.insertBefore(t, c)) }(document, "script", "facebook-jssdk") }), []), Object(M.jsx)(M.Fragment, { children: Object(M.jsx)("div", { class: "fb-comments", "data-href": a, "data-width": "100%", "data-numposts": "5" }) }) }; var He = e => { let a = e.location.search.split("?id=")[1]; const s = window.location.href, c = Object(o.b)(), r = Object(o.c)((e => e.car.isLoadingCarById)), i = Object(o.c)((e => e.car.detailCar)), n = Object(o.c)((e => e.booking.isCreatingBooking)), [l, d] = Object(t.useState)(!1); Object(t.useEffect)((() => { c(V(a)) }), [a]); const j = () => { d(!1) }; return r || n ? Object(M.jsx)(X, {}) : Object(M.jsx)("div", { className: "detail-car-container", children: Object(M.jsxs)("div", { className: "container", children: [Object(M.jsx)("h1", { className: "detail-car-title", children: "DETAIL CAR PAGE" }), i && Object(M.jsxs)("div", { className: "detail-car row", children: [Object(M.jsx)("div", { className: "img-car-container col-12 col-lg-5", children: Object(M.jsx)("div", { style: { backgroundImage: "url(".concat(i.image, ")") }, className: "img-car" }) }), Object(M.jsx)("div", { className: "info-car-container col-12 col-lg-7", children: Object(M.jsxs)("div", { className: "info-car", children: [Object(M.jsx)("h2", { className: "car-name", children: i.name }), Object(M.jsx)(De, { dataHref: s }), Object(M.jsx)("h3", { children: "Description:" }), Object(M.jsxs)("p", { className: "car-description", children: [" ", i.description] }), Object(M.jsx)("button", { onClick: () => { d(!0) }, className: "btn btn-primary", children: "Booking" })] }) }), Object(M.jsx)(Re, { dataHref: s })] }), Object(M.jsx)(Ae, { createBookingShow: l, createBookingClose: j })] }) }) }; var Ge = () => Object(M.jsx)(M.Fragment, { children: Object(M.jsxs)(n.d, { children: [Object(M.jsx)(Pe, { path: "/personal", component: Me }), Object(M.jsx)(Pe, { path: "/car", component: ge, exact: !0 }), Object(M.jsx)(Pe, { path: "/booking/manage", component: Le, exact: !0 }), Object(M.jsx)(Pe, { path: "/booking", component: Fe, exact: !0 }), Object(M.jsx)(Pe, { path: "/user", exact: !0, component: pe }), Object(M.jsx)(Pe, { path: "/user/detail", component: Ie }), Object(M.jsx)(Pe, { path: "/car/detail", component: He, exact: !0 }), Object(M.jsx)(n.b, { path: "/", exact: !0, children: Object(M.jsx)(ae, {}) }), Object(M.jsx)(n.b, { path: "/login", children: Object(M.jsx)(re, {}) }), Object(M.jsx)(n.b, { path: "/register", children: Object(M.jsx)(ie, {}) }), Object(M.jsx)(n.b, { path: "*", children: "404 NOT FOUND" })] }) }); var Te = function () { const e = Object(o.b)(), a = Object(o.c)((e => e.user.isRefreshingUser)), s = Object(o.c)((e => e.user.isRemoving)), c = Object(o.c)((e => e.user.user)); return Object(t.useEffect)((() => { c || e(C()) }), [c]), a || s ? Object(M.jsx)(X, {}) : Object(M.jsxs)("div", { children: [Object(M.jsxs)(l.a, { children: [Object(M.jsx)("div", { className: "nav-container", children: Object(M.jsx)(I, {}) }), Object(M.jsx)("div", { className: "app-container", children: Object(M.jsx)(Ge, {}) })] }), Object(M.jsx)(i.a, { position: "top-center", limit: 1, autoClose: 5e3, hideProgressBar: !1, newestOnTop: !1, closeOnClick: !0, rtl: !1, pauseOnFocusLoss: !0, draggable: !0, pauseOnHover: !0, theme: "light" })] }) }; var ze = e => { e && e instanceof Function && s.e(3).then(s.bind(null, 193)).then((a => { let { getCLS: s, getFID: t, getFCP: c, getLCP: r, getTTFB: i } = a; s(e), t(e), c(e), r(e), i(e) })) }; s(187), s(188); const We = Object(d.a)({ reducer: { user: L, car: K, booking: we } }); r.a.render(Object(M.jsx)(o.a, { store: We, children: Object(M.jsx)(Te, {}) }), document.getElementById("root")), ze() } }, [[189, 1, 2]]]);
//# sourceMappingURL=main.3090e43c.chunk.js.map